classdef AnalyticSignalHCP < handle & mlraut.AnalyticSignal
    %% Implements Raut, et al.  Global waves synchronize the brain's functional systems with fluctuating arousal.
    %  https://www.science.org/doi/10.1126/sciadv.abf2709
    %  Extends physio_phase_mapping.m.
    %  Emphasizes consistency of analytic signal generated by Hilbert transform.
    %  
    %  Created 29-Nov-2022 13:47:07 by jjlee in repository /Users/jjlee/MATLAB-Drive/mlraut/src/+mlraut.
    %  Developed on Matlab 9.13.0.2105380 (R2022b) Update 2 for MACI64.  Copyright 2022 John J. Lee.
    

    properties (Dependent)
        num_nets
        num_sub
        num_tasks

        comparator
        HCP_signals
    end

    methods %% GET, SET
        function g = get.num_nets(~)
            g = length(mlraut.NetworkData.NETWORKS_YEO_NAMES);
        end
        function g = get.num_sub(this)
            g = numel(this.subjects);
        end
        function g = get.num_tasks(this)
            g = numel(this.tasks);
        end

        function g = get.comparator(this)
            g = this.comparator_;
        end
        function g = get.HCP_signals(this)
            g = this.HCP_signals_;
        end
    end
    
    methods
        function psis = average_network_signals(this)
            arguments
                this mlraut.AnalyticSignalHCP
            end

            this.HCP_signals_.cbm.psi = this.average_network_signal(this.bold_signal_, network_type="cerebellar");
            this.HCP_signals_.cbm.phi = this.average_network_signal(this.physio_signal_, network_type="cerebellar");
            this.HCP_signals_.ctx.psi = this.average_network_signal(this.bold_signal_, network_type="cortical");
            this.HCP_signals_.ctx.phi = this.average_network_signal(this.physio_signal_, network_type="cortical");
            this.HCP_signals_.str.psi = this.average_network_signal(this.bold_signal_, network_type="striatal");
            this.HCP_signals_.str.phi = this.average_network_signal(this.physio_signal_, network_type="striatal");
            this.HCP_signals_.thal.psi = this.average_network_signal(this.bold_signal_, network_type="thalamic");
            this.HCP_signals_.thal.phi = this.average_network_signal(this.physio_signal_, network_type="thalamic");
            psis = this.HCP_signals;
        end

        function this = call(this)

            % e.g., exclude subjects
            % this.subjects = this.subjects(~contains(this.subjects, '_7T'));  % 7T studies still listed under tasks
            % this.subjects = this.subjects(~contains(this.subjects, 'sub-'));

            for s = 1:this.num_sub
                try
                    this.current_subject = this.subjects{s};
                    this.update_out_dir();
                    this.call_subject();
                catch ME
                    handwarning(ME)
                end
            end
        end

        function this = call_subject(this)

            for t = 1:this.num_tasks     
                try
                    this.current_task = this.tasks{t};
                    this.call_task();
                catch ME
                    handwarning(ME)
                end
            end
        end

        function this = call_task(this)

            %% Hilbert transform is applied after most other operations
            
            this.malloc();  % resets caches for each task

            % BOLD
            try
                bold_gsr_ = ...
                    this.build_global_signal_regressed(this.task_dtseries());
                bold_ = ...
                    this.build_rescaled( ...
                    this.build_band_passed( ...
                    this.build_centered(bold_gsr_)));
                if ~isemptytext(getenv("VERBOSITY")); fprintf("size(bold_):\n"); disp(size(bold_)); end
            catch ME
                disp([this.current_subject ' ' this.current_task ' BOLD missing or defective:']);
                handexcept(ME)
            end

            % physio
            try
                physio_ = this.task_physio();
                if ~isemptytext(getenv("VERBOSITY")); fprintf("size(physio_):\n"); disp(size(physio_)); end
                this.physio_supplementary_ = this.task_physio_supplementary();
                if ~isemptytext(getenv("VERBOSITY"))
                    fprintf("size(physio_supplementary):\n");
                    disp(size(this.physio_supplementary_));
                end
            catch ME
                disp([this.current_subject ' ' this.current_task ' physio missing or defective:']);
                handexcept(ME)
            end

            % Store BOLD signals
            this.bold_signal_ = hilbert(bold_);

            % Store physio signals
            this.physio_signal_ = hilbert(physio_);

            % Store averages for networks
            this.average_network_signals();

            % Store connectivity for comparisons
            this.comparator_ = this.connectivity(bold_, physio_);

            % do plots
            this.meta_plot();

            % do save
            this.meta_save();
        end

        function concat_frames(this, that)
            arguments
                this mlraut.AnalyticSignalHCP
                that mlraut.AnalyticSignalHCP
            end

            concat_frames@mlraut.AnalyticSignal(this, that);
            for fld = asrow(fieldnames(this.HCP_signals_))  % cbm, ctx, str, thal, gbm
                fld_ = fld{1};
                this.HCP_signals_.(fld_).psi = [this.HCP_signals_.(fld_).psi; that.HCP_signals_.(fld_).psi];
                this.HCP_signals_.(fld_).phi = [this.HCP_signals_.(fld_).phi; that.HCP_signals_.(fld_).phi];
            end

            % update comparator
            this.comparator_ = this.connectivity(this.bold_signal_, mean(this.physio_signal_, 2));
        end

        function mat = connectivity(~, bold, seed)
            bold = real(bold)';  % N.B.:  Nx x Nt
            seed = real(seed)';
            seed = mean(seed, 1);  %#ok<UDIM> % N.B.:  1 x Nt
            Nx = size(bold, 1);
            mat = nan(Nx, 1);  % Nx x 1
            for pos = 1:Nx
                R = corrcoef(bold(pos, :), seed);
                mat(pos) = R(1, 2);
            end
        end

        function this = malloc(this)
            %% reset for new tasks or new subjects

            this = malloc@mlraut.AnalyticSignal(this);

            this.comparator_ = [];

            this.HCP_signals_.cbm.psi = complex(nan(this.num_frames,this.num_nets));
            this.HCP_signals_.cbm.phi = complex(nan(this.num_frames,this.num_nets));
            this.HCP_signals_.ctx.psi = complex(nan(this.num_frames,this.num_nets));
            this.HCP_signals_.ctx.phi = complex(nan(this.num_frames,this.num_nets));
            this.HCP_signals_.str.psi = complex(nan(this.num_frames,this.num_nets));
            this.HCP_signals_.str.phi = complex(nan(this.num_frames,this.num_nets));
            this.HCP_signals_.thal.psi = complex(nan(this.num_frames,this.num_nets));
            this.HCP_signals_.thal.phi = complex(nan(this.num_frames,this.num_nets));
        end 

        function meta_plot(this)
            if this.do_plot_global_physio
                error("mlraut:NotImplementedError", stackstr())
            end
            if this.do_plot_wavelets
                this.plot_regions(@this.plot_cmor, measure=@this.X);
                this.plot_regions(@this.plot_cmor, measure=@this.Y);
                this.plot_regions(@this.plot_cmor, measure=@this.Z);
                this.plot_regions(@this.plot_cmor, measure=@this.T);
                this.plot_regions(@this.plot_wcoherence, measure=@nan);
                this.plot_regions(@this.plot_cwt, measure=@nan);
            end
            if this.do_plot_networks
                this.plot_regions(@this.plot_networks, measure=@this.X);
                this.plot_regions(@this.plot_networks, measure=@this.Y);
                this.plot_regions(@this.plot_networks, measure=@this.Z);
                this.plot_regions(@this.plot_networks, measure=@this.T);
                this.plot_regions(@this.plot_networks_dots, measure=@this.angle);
                this.plot_regions(@this.plot_networks_dots, measure=@this.unwrap);
            end
            if this.do_plot_radar
                error("mlraut:NotImplementedError", stackstr())
            end
            if this.do_plot_emd
                error("mlraut:NotImplementedError", stackstr())
            end
        end

        function meta_save(this)
            if this.do_save_ciftis

                % connectivity(this.bold_signal_, this.physio_signal_), with matching normalizations
                if ~isempty(this.comparator_)
                    this.write_cifti( ...
                        this.comparator_, ...
                        sprintf('connectivity_sub-%s_ses-%s_%s', this.current_subject, this.current_task, this.tags));
                end

                % cortical X(psi, phi) >= 0, region 9 ~ task-, biased but informative
                % parts = this.X(this.HCP_signals.ctx.psi(:,9), this.HCP_signals.ctx.phi(:,9)) >= 0;  
                % parts = cos(this.physio_angle) >= 0;  % unbiased, but shows identical features in trues/falses                
                if this.do_save_bias_to_rsns
                    for rsn = 1:7
                        angle_rsn = this.angle(this.HCP_signals.ctx.psi(:,rsn), this.HCP_signals.ctx.phi(:,rsn));
                        t_interesting = cos(angle_rsn) > 0;
                        u_interesting = sin(angle_rsn) > 0;
                        tags = this.tags("rsn"+rsn);
                        this.write_ciftis( ...
                            this.X(this.bold_signal_, this.physio_signal_), ...
                            sprintf('X_as_sub-%s_ses-%s_%s', this.current_subject, this.current_task, tags), ...
                            partitions=t_interesting, ...
                            do_save_dynamic=this.do_save_dynamic);
                        this.write_ciftis( ...
                            this.Y(this.bold_signal_, this.physio_signal_), ...
                            sprintf('Y_as_sub-%s_ses-%s_%s', this.current_subject, this.current_task, tags), ...
                            partitions=u_interesting, ...
                            do_save_dynamic=this.do_save_dynamic);
                    end
                end

                % ciftis for wb_view
                tags = this.tags();
                this.write_ciftis( ...
                    this.T(this.bold_signal_, this.physio_signal_), ...
                    sprintf('T_as_sub-%s_ses-%s_%s', this.current_subject, this.current_task, tags), ...
                    partitions=[], ...
                    do_save_dynamic=this.do_save_dynamic);
                this.write_ciftis( ...
                    this.Z(this.bold_signal_, this.physio_signal_), ...
                    sprintf('Z_as_sub-%s_ses-%s_%s', this.current_subject, this.current_task, tags), ...
                    partitions=[], ...
                    do_save_dynamic=this.do_save_dynamic);
                this.write_ciftis( ...
                    this.X(this.bold_signal_, this.physio_signal_), ...
                    sprintf('X_as_sub-%s_ses-%s_%s', this.current_subject, this.current_task, tags), ...
                    partitions=[], ...
                    do_save_dynamic=this.do_save_dynamic);
                this.write_ciftis( ...
                    this.Y(this.bold_signal_, this.physio_signal_), ...
                    sprintf('Y_as_sub-%s_ses-%s_%s', this.current_subject, this.current_task, tags), ...
                    partitions=[], ...
                    do_save_dynamic=this.do_save_dynamic);
                this.write_ciftis( ...
                    this.angle(this.bold_signal_, this.physio_signal_), ...
                    sprintf('angle_as_sub-%s_ses-%s_%s', this.current_subject, this.current_task, tags), ...
                    partitions=[], ...
                    do_save_dynamic=this.do_save_dynamic);
                this.write_ciftis( ...
                    this.unwrap(this.bold_signal_, this.physio_signal_), ...
                    sprintf('unwrap_as_sub-%s_ses-%s_%s', this.current_subject, this.current_task, tags), ...
                    partitions=[], ...
                    do_save_dynamic=this.do_save_dynamic);

                % ciftis with mean abs. dev. for wb_view
                if this.do_save_ciftis_mad
                    tags = this.tags();
                    this.write_ciftis( ...
                        abs(this.T(this.bold_signal_, this.physio_signal_)), ...
                        sprintf('abs_T_as_sub-%s_ses-%s_%s', this.current_subject, this.current_task, tags), ...
                        partitions=[], ...
                        do_save_dynamic=this.do_save_dynamic);
                    this.write_ciftis( ...
                        abs(this.Z(this.bold_signal_, this.physio_signal_)), ...
                        sprintf('abs_Z_as_sub-%s_ses-%s_%s', this.current_subject, this.current_task, tags), ...
                        partitions=[], ...
                        do_save_dynamic=this.do_save_dynamic);
                    this.write_ciftis( ...
                        abs(this.X(this.bold_signal_, this.physio_signal_)), ...
                        sprintf('abs_X_as_sub-%s_ses-%s_%s', this.current_subject, this.current_task, tags), ...
                        partitions=[], ...
                        do_save_dynamic=this.do_save_dynamic);
                    this.write_ciftis( ...
                        abs(this.Y(this.bold_signal_, this.physio_signal_)), ...
                        sprintf('abs_Y_as_sub-%s_ses-%s_%s', this.current_subject, this.current_task, tags), ...
                        partitions=[], ...
                        do_save_dynamic=this.do_save_dynamic);
                    this.write_ciftis( ...
                        abs(this.angle(this.bold_signal_, this.physio_signal_)), ...
                        sprintf('abs_angle_as_sub-%s_ses-%s_%s', this.current_subject, this.current_task, tags), ...
                        partitions=[], ...
                        do_save_dynamic=this.do_save_dynamic);
                    this.write_ciftis( ...
                        abs(this.unwrap(this.bold_signal_, this.physio_signal_)), ...
                        sprintf('abs_unwrap_as_sub-%s_ses-%s_%s', this.current_subject, this.current_task, tags), ...
                        partitions=[], ...
                        do_save_dynamic=this.do_save_dynamic);
                end
            end
            if this.do_save_ciftis_of_diffs                        
                error("mlraut:NotImplementedError", stackstr())
            end
            if this.do_save
                % Store reduced analytic signals for current_subject, current_task
                % grid of data from s, t may be assessed with stats
                save(this);
            end
        end

        function h = plot_coherencyc(this, varargin)
            warning("off", "MATLAB:plot:IgnoreImaginaryXYPart")
            fultz = mlraut.FultzMulti(this);
            fultz.add_phi_psi_from_aso();
            h = figure;
            fultz.plot_coherencyc(varargin{:});
            warning("on", "MATLAB:plot:IgnoreImaginaryXYPart")
        end

        function save(this)
            %% save this fully or a reduced subset

            if this.do_save_subset
                this.save_subset();
                return
            end
            
            try
                save(this.mat_fqfn(), 'this', '-v7.3');
            catch ME
                handwarning(ME)
            end
        end

        function save_subset(this)
            %% reduce size of saved

            this_subset.num_nets = this.num_nets;
            this_subset.num_sub = this.num_sub;
            this_subset.num_tasks = this.num_tasks;
            this_subset.comparator = this.comparator;
            this_subset.HCP_signals = this.HCP_signals;
            this_subset.do_global_signal_regression = this.do_global_signal_regression;
            this_subset.do_plot_emd = this.do_plot_emd;
            this_subset.do_plot_global_physio = this.do_plot_global_physio;
            this_subset.do_plot_networks = this.do_plot_networks;
            this_subset.do_plot_radar = this.do_plot_radar;
            this_subset.do_plot_wavelets = this.do_plot_wavelets;
            this_subset.do_save = this.do_save;
            this_subset.do_save_bias_to_rsns = this.do_save_bias_to_rsns;
            this_subset.do_save_ciftis = this.do_save_ciftis;
            this_subset.do_save_ciftis_of_diffs = this.do_save_ciftis_of_diffs;
            this_subset.do_save_dynamic = this.do_save_dynamic;
            this_subset.do_save_subset = this.do_save_subset;
            this_subset.filter_order = this.filter_order;
            this_subset.force_band = this.force_band;
            this_subset.force_legacy_butter = this.force_legacy_butter;
            this_subset.frac_ext_physio = this.frac_ext_physio;
            this_subset.norm = this.norm;
            this_subset.source_physio = this.source_physio;
            this_subset.source_physio_supplementary = this.source_physio_supplementary;
            this_subset.v_physio = this.v_physio;
            this_subset.anatomy_list = this.anatomy_list;
            this_subset.digital_filter = this.digital_filter;
            this_subset.global_signal = this.global_signal;
            this_subset.hp_thresh = this.hp_thresh;
            this_subset.lp_thresh = this.hp_thresh;
            this_subset.rescaling = this.rescaling;
            this_subset.rsn_list = this.rsn_list;
            this_subset.tags_user = this.tags_user;
            this_subset.bold_signal = this.bold_signal;
            this_subset.physio_angle = this.physio_angle;
            this_subset.physio_signal = this.physio_signal;
            this_subset.physio_supplementary = this.physio_supplementary;
            this_subset.roi = this.roi;
            this_subset.v_physio_is_inf = this.v_physio_is_inf;
            this_subset.do_7T = this.do_7T;
            this_subset.do_resting = this.do_resting;
            this_subset.do_task = this.do_task;
            this_subset.max_frames = this.max_frames;
            this_subset.current_subject = this.current_subject;
            this_subset.current_task = this.current_task;
            this_subset.subjects = this.subjects;
            this_subset.tasks = this.tasks;
            this_subset.extended_task_dir = this.extended_task_dir;
            this_subset.Fs = this.Fs;
            this_subset.num_frames = this.num_frames;
            this_subset.num_frames_ori = this.num_frames_ori;
            this_subset.num_frames_to_trim = this.num_frames_to_trim;
            this_subset.num_nodes = this.num_nodes;
            this_subset.out_dir = this.out_dir;
            this_subset.root_dir = this.root_dir;
            this_subset.stats_fqfn = this.stats_fqfn;
            this_subset.task_dir = this.task_dir;
            this_subset.task_dtseries_fqfn = this.task_dtseries_fqfn;
            this_subset.task_niigz_fqfn = this.task_niigz_fqfn;
            this_subset.task_ref_niigz_fqfn = this.task_ref_niigz_fqfn;
            this_subset.task_ref_dscalar_fqfn = this.task_ref_dscalar_fqfn;
            this_subset.thickness_dscalar_fqfn = this.thickness_dscalar_fqfn;
            this_subset.t1w_fqfn = this.t1w_fqfn;
            this_subset.tr = this.tr;
            this_subset.waves_dir = this.waves_dir;
            this_subset.wmparc_fqfn = this.wmparc_fqfn;
            this_subset.workbench_dir = this.workbench_dir;

            try
                save(this.mat_fqfn(), 'this_subset', '-v7.3');
            catch ME
                handwarning(ME)
            end
        end

        function this = AnalyticSignalHCP(varargin)
            this = this@mlraut.AnalyticSignal(varargin{:});
        end
    end

    %% PROTECTED

    properties (Access = protected)
        comparator_
        HCP_signals_
    end

    methods (Access = protected)
        function this = update_out_dir(this)
            out_dir_ = this.out_dir;
            if ~contains(out_dir_, this.current_subject)  % add subject folder to out_dir as needed
                out_dir_ = fullfile(out_dir_, this.current_subject);
                ensuredir(out_dir_);
                this.out_dir = out_dir_;
            end
        end
    end
    
    %  Created with mlsystem.Newcl, inspired by Frank Gonzalez-Morphy's newfcn.
end
