classdef Test_Twistors < matlab.unittest.TestCase
    %% line1
    %  line2
    %  
    %  Created 11-Dec-2024 22:23:24 by jjlee in repository /Users/jjlee/MATLAB-Drive/mlraut/test/+mlraut_unittest.
    %  Developed on Matlab 24.2.0.2773142 (R2024b) Update 2 for MACA64.  Copyright 2024 John J. Lee.
    
    properties
        testObj
    end
    
    methods (Test)
        function test_afun(this)
            import mlraut.*
            this.assumeEqual(1,1);
            this.verifyEqual(1,1);
            this.assertEqual(1,1);
        end

        function test_center_of_mass_position(this)
            pth = fullfile(getenv("HOME"), "Local", "atlas");
            roi = mlfourd.ImagingContext2(fullfile(pth, "MNI152_T1_2mm_brain_mask.nii.gz"));
            [pos,v] = this.testObj.center_of_mass_position(roi);
            fprintf("pos -> %g\n", pos)
            fprintf("indicers -> %g\n", v)
            roi.view()
        end

        function test_grayordinate_positions(this)
            pos = this.testObj.grayordinate_positions();
            x = pos(1, :);
            y = pos(2, :);
            z = pos(3, :);
            figure; scatter3(x, y, z, 'filled')
            axis equal; grid on;
        end

        function test_grayordinate_positions_gbm(this)

            SUB = {'sub-I3CR0023'};
            root_dir = '/Volumes/PrecunealSSD2/AnalyticSignalGBM/analytic_signal/dockerout/ciftify';
            cd(root_dir);
            out_dir = '/Volumes/PrecunealSSD2/AnalyticSignalGBM/analytic_signal/matlabout/2-spinor/mlraut_Test_Twistors';
            ensuredir(out_dir);
            ce = mlfourd.ImagingContext2( ...
                fullfile(root_dir, SUB{1}, 'MNINonLinear', 'CE_on_T1w.nii.gz'));
            as = mlraut.AnalyticSignalGBM( ...
                subjects=SUB, ...
                tasks={'ses-1_task-rest_run-all_desc-preproc'}, ...
                do_resting=true, ...
                do_save=true, ...
                do_save_dynamic=true, ...
                do_save_ciftis=true, ...
                out_dir=out_dir, ...
                lp_thresh=0.4, ...
                roi=ce, ...
                v_physio=0.01, ...
                tags="CE");
            tw = mlraut.Twistors(as);

            pos = tw.grayordinate_positions();
            x = pos(1, :);
            y = pos(2, :);
            z = pos(3, :);
            figure; scatter3(x, y, z, 'filled')
            axis equal; grid on;
        end

        function test_propagate_physio_gbm(this)

            SUB = {'sub-I3CR1488'};
            root_dir = '/Volumes/PrecunealSSD2/AnalyticSignalGBM/analytic_signal/dockerout/ciftify';
            cd(root_dir);
            out_dir = '/Volumes/PrecunealSSD2/AnalyticSignalGBM/analytic_signal/matlabout/2-spinor/mlraut_Test_Twistors';
            ensuredir(out_dir);
            ce = mlfourd.ImagingContext2( ...
                fullfile(root_dir, SUB{1}, 'MNINonLinear', 'CE_on_T1w.nii.gz'));
            as = mlraut.AnalyticSignalGBM( ...
                subjects=SUB, ...
                tasks={'ses-1_task-rest_run-all_desc-preproc'}, ...
                do_resting=true, ...
                do_save=true, ...
                do_save_dynamic=true, ...
                do_save_ciftis=true, ...
                force_legacy_butter=true, ...
                out_dir=out_dir, ...
                hp_thresh=0.01, ...
                lp_thresh=0.1, ...
                roi=ce, ...
                v_physio=50, ...
                tags="CE");
            tw = mlraut.Twistors(as);

            as.build_conc();
            as.malloc();
            as.current_task = as.tasks{1};

            bold_gsr_ = ...
                as.build_global_signal_regressed(as.task_dtseries());
            bold_ = ...
                as.build_band_passed( ...
                as.build_centered_and_rescaled(bold_gsr_));

            physio_gsr_ = ...
                as.build_global_signal_regressed(as.task_physio());
            physio_ = ...
                as.build_band_passed( ...
                as.build_centered_and_rescaled(physio_gsr_, reference=bold_gsr_));

            bold_signal = hilbert(bold_);
            physio_signal = hilbert(physio_);
            propagated = tw.propagate_physio(physio_signal, size_bold_signal=size(bold_signal));

            as.write_ciftis( ...
                abs(propagated), ...
                sprintf('abs_propagated_sub-%s_ses-%s_%s', as.subjects{1}, as.tasks{1}, as.tags), ...
                do_save_dynamic=as.do_save_dynamic);
        end
    end
    
    methods (TestClassSetup)
        function setupTwistors(this)
            import mlraut.*
            % this.ihcp_ = mlraut.AnalyticSignalHCP( ...
            %     subjects={'995174'}, ...
            %     tasks={'rfMRI_REST1_RL'}, ...
            %     do_7T=false, ...
            %     do_resting=true, ...
            %     do_task=false, ...
            %     do_global_signal_regression=true, ...
            %     do_save=false, ...
            %     do_save_dynamic=false, ...
            %     do_save_ciftis=false, ...
            %     force_band=false, ...
            %     hp_thresh=0.01, ...
            %     lp_thresh=0.1, ...
            %     tags=stackstr(use_dashes=true));
            this.ihcp_ = mlraut.AnalyticSignalGBM( ...
                subjects={'sub-I3CR1488'}, ...                
                tasks={'ses-1_task-rest_run-all_desc-preproc'}, ...
                do_7T=false, ...
                do_resting=true, ...
                do_task=false, ...
                do_global_signal_regression=true, ...
                do_save=false, ...
                do_save_dynamic=false, ...
                do_save_ciftis=false, ...
                force_band=false, ...
                hp_thresh=0.01, ...
                lp_thresh=0.1, ...
                tags=stackstr(use_dashes=true));
            this.testObj_ = Twistors(this.ihcp_);
        end
    end
    
    methods (TestMethodSetup)
        function setupTwistorsTest(this)
            this.testObj = this.testObj_;
            this.addTeardown(@this.cleanTestMethod)
        end
    end
    
    properties (Access = private)
        testObj_
        ihcp_
    end
    
    methods (Access = private)
        function cleanTestMethod(this)
        end
    end
    
    %  Created with mlsystem.Newcl, inspired by Frank Gonzalez-Morphy's newfcn.
end
