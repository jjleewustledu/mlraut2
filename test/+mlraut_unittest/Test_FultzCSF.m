classdef Test_FultzCSF < matlab.unittest.TestCase
    %% line1
    %  line2
    %  
    %  Created 02-May-2025 23:14:47 by jjlee in repository /Users/jjlee/MATLAB-Drive/mlraut/test/+mlraut_unittest.
    %  Developed on Matlab 24.2.0.2923080 (R2024b) Update 6 for MACA64.  Copyright 2025 John J. Lee.
    
    properties
        testObj
    end
    
    methods (Test)
        function test_afun(this)
            import mlraut.*
            this.assumeEqual(1,1);
            this.verifyEqual(1,1);
            this.assertEqual(1,1);
        end

        function test_build_band_passed(this)

            SUB = {'sub-I3CR1488'};  % OS ~ 60 days, 60 yo
            out_dir = '/Volumes/PrecunealSSD2/AnalyticSignalGBM/analytic_signal/fultz';
            obj = mlraut.AnalyticSignalGBM( ...
                    subjects=SUB, ...
                    tasks={'ses-1_task-rest_run-all_desc-preproc'}, ...
                    do_resting=true, ...
                    do_save=false, ...
                    do_save_dynamic=false, ...
                    do_save_ciftis=false, ...
                    out_dir=out_dir, ...
                    v_physio=50, ...
                    plot_range=1:69, ...
                    do_plot_networks=false, ...
                    do_plot_wavelets=false, ...
                    source_physio='iFV-brightest', ...
                    hp_thresh=[], ...
                    lp_thresh=0.1, ...
                    filter_order=8, ...
                    force_legacy_butter=false, ...
                    tag="fultz");

            try
                obj.malloc();
                obj.current_task = obj.tasks{1};
                physio__ = obj.task_physio();
                figure; plot(physio__); 
                figure; freqz(obj.digital_filter, [], obj.Fs)
            catch ME
                handexcept(ME)
            end
        end

        function test_call_GBM_all(this)
            out_dir = '/Volumes/PrecunealSSD2/AnalyticSignalGBM/analytic_signal/fultz';
            cd('/Volumes/PrecunealSSD2/AnalyticSignalGBM/analytic_signal/dockerout/ciftify')
            globbed = mglob("sub-*");
            for g = asrow(globbed)
                fprintf("working on %s .....\n", g)
                for phy = {'iFV-brightest', 'CE_on_T1w', 'gray'}
                    try
                        obj = mlraut.AnalyticSignalGBM( ...
                            subjects=g, ...
                            tasks={'ses-1_task-rest_run-all_desc-preproc'}, ...
                            do_global_signal_regression=false, ...
                            do_save=true, ...
                            do_save_ciftis=false, ...
                            out_dir=out_dir, ...
                            v_physio=50, ...
                            plot_range=1:69, ...
                            source_physio=phy{1}, ...
                            hp_thresh=[], ...
                            lp_thresh=0.1, ...
                            rescaling="iqr", ...
                            tag="fultz");
                        call(obj);
                    catch ME
                        fprintf("\texception: likely missing ciftify outputs\n")
                    end
                end
            end
        end

        function test_call_GBM(this)
            % SUB = {'sub-I3CR0668'};  % OS ~ 2568 days, 46 yo
            % SUB = {'sub-I3CR0311'};  % OS ~ 2246 days, 36 yo
            % SUB = {'sub-I3CR0111'};  % OS ~ 2246 days   
            SUB = {'sub-I3CR1488'};  % OS ~ 60 days, 60 yo
            % SUB = {'sub-I3CR1088'};  % OS ~ 22 days, 76 yo
            out_dir = '/Volumes/PrecunealSSD2/AnalyticSignalGBM/analytic_signal/fultz';
            size_bold = [320, 91282];

            obj = mlraut.AnalyticSignalGBM( ...
                subjects=SUB, ...
                tasks={'ses-1_task-rest_run-all_desc-preproc'}, ...
                do_global_signal_regression=false, ...
                do_save=true, ...
                do_save_ciftis=true, ...
                out_dir=out_dir, ...
                v_physio=50, ...
                plot_range=1:69, ...
                source_physio='gray', ...
                hp_thresh=[], ...
                lp_thresh=0.1, ...
                rescaling="iqr", ...
                tag="fultz");
            call(obj)

            % qc
            % pwd0 = pushd(this.testObj_.out_dir);
            % zeta = this.testObj_.HCP_signals.ctx.psi(:,9) ./ this.testObj_.HCP_signals.ctx.phi(:,9);
            % this.testObj_.fit_power_law(x=zeta, title="\zeta = \psi / \phi");
            % this.testObj_.plot3(z=zeta, symbol="\zeta")  % re(psi) vaguely resemble ECG :-)
            % this.testObj_.plot3(z=this.testObj_.HCP_signals.ctx.psi(:,9), symbol="\psi")  % ctx, task-
            % this.testObj_.plot3(z=this.testObj_.HCP_signals.ctx.phi(:,9), symbol="\phi")  % ctx, task-
            % % figure; imagesc(angle(this.testObj_.physio_signal));
            % this.testObj_.plotting.saveFigures("qc");
            % popd(pwd0);
        end

        function test_call_HCPAging(this) 
            SUB = {'HCA9992517_V1_MR'};  
            out_dir = '/Volumes/PrecunealSSD2/AnalyticSignalHCPAging/fultz';
            size_bold = [2717, 91282];

            obj = mlraut.AnalyticSignalHCPAging( ...
                subjects=SUB, ...
                tasks={'fMRI_CONCAT_ALL'}, ...
                do_global_signal_regression=false, ...
                do_save=true, ...
                do_save_ciftis=true, ...
                out_dir=out_dir, ...
                v_physio=50, ...
                plot_range=1:69, ...
                source_physio='iFV-brightest', ...
                hp_thresh=[], ...
                lp_thresh=0.1, ...
                rescaling="iqr", ...
                tag="fultz");
            call(obj)

            % qc
            % pwd0 = pushd(this.testObj_.out_dir);
            % zeta = this.testObj_.HCP_signals.ctx.psi(:,9) ./ this.testObj_.HCP_signals.ctx.phi(:,9);
            % this.testObj_.fit_power_law(x=zeta, title="\zeta = \psi / \phi");
            % this.testObj_.plot3(z=zeta, symbol="\zeta")  % re(psi) vaguely resemble ECG :-)
            % this.testObj_.plot3(z=this.testObj_.HCP_signals.ctx.psi(:,9), symbol="\psi")  % ctx, task-
            % this.testObj_.plot3(z=this.testObj_.HCP_signals.ctx.phi(:,9), symbol="\phi")  % ctx, task-
            % % figure; imagesc(angle(this.testObj_.physio_signal));
            % this.testObj_.plotting.saveFigures("qc");
            % popd(pwd0);
        end

        function test_call_HCPAging_nofilt(this) 
            SUB = {'HCA9992517_V1_MR'};  
            out_dir = '/Volumes/PrecunealSSD2/AnalyticSignalHCPAging/fultz';
            size_bold = [2717, 91282];

            obj = mlraut.AnalyticSignalHCPAging( ...
                subjects=SUB, ...
                tasks={'fMRI_CONCAT_ALL'}, ...
                do_global_signal_regression=false, ...
                do_save=true, ...
                do_save_ciftis=false, ...
                out_dir=out_dir, ...
                v_physio=50, ...
                plot_range=1:69, ...
                source_physio='iFV-brightest', ...
                hp_thresh=[], ...
                lp_thresh=[], ...
                rescaling="iqr", ...
                tag="fultz");
            call(obj)
        end
    end
    
    methods (TestClassSetup)
        function setupFultzCSF(this)
            import mlraut.*
            this.testObj_ = FultzCSF();
            setenv("SINGULARITY_HOME", "/Users/jjlee/Singularity")
        end
    end
    
    methods (TestMethodSetup)
        function setupFultzCSFTest(this)
            this.testObj = this.testObj_;
            this.addTeardown(@this.cleanTestMethod)
        end
    end
    
    properties (Access = private)
        testObj_
    end
    
    methods (Access = private)
        function cleanTestMethod(this)
        end
    end
    
    %  Created with mlsystem.Newcl, inspired by Frank Gonzalez-Morphy's newfcn.
end
